> Synchronous vs Asynchronous 
  Synchronous:
  - For this API call, data is processed at the time of the request. Any requested data is returned in the API call response.
  - Synchronous process run in series and are generally used for small amounts of data or simple processing tasks

  Asynchronous:
  - Asynchronous API call add a processing task as a batch job to a processing queue. The API response returns information about the job.
  - Batch jobs run in parallel with several processors working simultaneously. So, large jobs gets split up and processed efficiently.
    You can monitor the status of the jobs using the APIs
  - Asynchronous processes are generally used for large amounts of data or complex processing tasks.

> Javasript Object Notation (JSON)
  - Data and Metadata stored in Reltio tenants are stored as JSON Objects
  - It includes Entities, Relationships, interactions. The definition of data models(types), cleansers, match rules, survivoship rules are stored as JSON

> Application Program Interface (API)
  - Reltio uses Application Program Interface (API) first software development strategy.
  - Everything we need to do when interacting with Reltio tenant can be done using secure REST API. 
  - Reltio UI also used API to fetch data. All integration methods use API either explicitly or in background

> Loading data into Reltio with APIs

  - Asynchronous Load API
    It is the most efficient way to process data load. The way can be to bulk load data from files, which will start batch job.
    - Upload files from S3, Google Cloud Storage, Azure Blob Storgae, SFTP
    - Limits CSV (33 GB max remote, 50 MB max local), Excel (100,000 rows, 50 MB max local), JSON (50 MB max, 30-50 records at a time)
    - Best for Bulk loads, historical data loads, batched updates, loading one type at a time, easy mapping

   - Synchronous LOad API
     Most flexible way to load data into Reltio. Best way to load data for continuous system integrations.
     - This API is typically how the pre-built Reltio Connectors and Integration HUB (RIH) load data.
     - It triggers immediate processing
     - Data is loaded at run time. API response contains information about success and failure of the load.
     - Two basic steps to load data:
       > TRansform data into Reltio specific JSON 
       > Use the appropriate API to load the data
     - Post data using crossswalk id, entity id, relationship id, relationship start and end entity id
     - Can post entities and relationships at the same time
     - Best for Single record uploads, Small batch of updates, loading interactions, transformed data, continuous integration

> Exporting data from Reltio 
  - Asynchronous Export API
    Most efficient way to export data. The best way to bulk export the data.
    - Reltio Console Export Application uses same set of APIs in a low code interface for entities and relationships
    - UI and API (Entities, Relationships), API Only (Activity logs, Merge logs)
    - File location you can export to: S3, Google Cloud Storage, Azure Blob Storage
    - By default data is exported to cloud storage location inside your Reltio tenant. This location depends on virtual private cloud your tenant is set up in.
      For eg: If your tenant is hosted on AWS, then data exported will be AWS S3 bucket.
    - You can configure Aysnchoronous Export API to export to a specified location by providing credentials
    - Only one type (Entity , Relationship) can be exported in each file
    - For Bulk downloads, periodic batched updates

   - Synchronous Export API
     Most flexible way to get data out of Reltio. Best way to fetch data for real time continous system integration
     - These API are typically how the prebuilt connectors and Reltio Integration HUB (RIH) export data.
     - Can fetch data from many types - Entities, Relationship, Integration, Merges, Activity Log, and more.
     - Get data using crossswalk id, entity id, relationship id, relationship start and end entity id
     - Supported File Type - JSON, LIMIT per files is 30-50 records

 > Events API/ Streaming API
   To stream data from Reltio, use the events API. The Reltio events API publishes messages to cloud message queues that your applications then consume
   Reltio Message service queue creates a message for any CRUD or Merge event in tenant.
   - Reltio Snowflake and GBQ Connectors use similar set of API to sync data in real real time.
   - Streaming API is only available for export, importing via cloud message service requires custom integration or RIH.
   - Using events API you can stream event data about Reltio types including when Entities/ Relationships are created, updated, deleted, Matched/Merged, Unmerged,
     or the associated workflow status changed
   - Messages do not count towards API Hit limit. This is howvever not FIFO
   - Supported cloud message queue: AWS SQS, AWS SNS, GCP PubSub, Azure Service Bus
   - Messages can be sent to multiple message queues and filtered based on data type(Entity, relationship, integraction), Event Type (CRUS, Merge/Unmerge), value of attribute
   ** By default only data about the event and if the OV changed are sent in the message.
   ** You can send payload that contains all populated attributes for affected records. This is not recommended as it creates very large messages that slow down message queue
   
   - Supported File Types: JSON (Recommended), JSON Zipped by GZIp and converted into base64 
   - Limit: depends on message queue settings
   - Best for Custom Integrations using cloud message queue, keeping all db/ downstream in sync with Reltio














