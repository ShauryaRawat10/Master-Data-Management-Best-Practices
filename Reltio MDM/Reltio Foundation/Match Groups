Anatomy of Match Group:
 > Match Group section can have many match group as you need. Each Match Group has one Match Rule
 > An Entity will have 3 to 7 Match Groups on average
 > The Rule represent a range of tactics for comparing candidate pairs
 > Match Group consist of three key parts:
   - Comparison Formula
   - Comparator Classes
   - Tokanization Classes
 > Generally a match rule whose comparison formula evaluates to true for a given pair of records, will produce a directive of "merge" or "queue for review" 

Classic JSON Structure:
 rule
   > ignoreInToken
   > cleanse
   > matchTokenClasses
   > ComparatorClasses
   > and     }  Comparison Formula          
        > exact          
        > equals
        > fuzzy

 scope property in match rule : Internal, External, All (Defines where match rule is applicable)
 useOvOnly in match rule : Whether or not, only golden surviving value is considered for matching

Rule Types:
 1. Automatic (boolean)
 2. Suspect (boolean)
 3. <your rule name> (boolean)
 4. relevence_based (arithmetic)
 > Rules issue directives to match engine 
   (i) Merge
   (ii) Queue for review
   (iii) Publish an event of Auto Link (that candidate pairs for matching can have relationship instead)
   (iv) Publich an event Potential Link (that candidate pairs for matching can have relationship instead)


Comparison Formula:
 > Made up of Comparison Operator and Helper Operator that finally evaluates to True or False
   1. Comparison Operator (5): Exact, ExactOrNull, ExactOrAllNull, Fuzzy, NotExactSame
   2. Helper Operator (7): AND, OR, NOT, Equals, NotEquals, In, NullValues
 > Comparison Operator needs Comparison class to perform matching

Out-of-the-box Comparison Classes (16+):
 > AddressLineComparator
 > BasicStringComparator                           => Best for Exact Comparison
 > BasicTokanizedOrganizationNameComparator
 > DamerauLevenshteinDistanceComparator
 > DistinctWordsComparator
 > DynamicDamerauLevenshteinDistanceComparator
 > DoubleMetaphoneComparator
 > MetaphoneComparator
 > OrganizationNamesComparator
 > PhoneNumberComparator
 > RangeNumericComparator
 > SondexComparator
 > StringCharactersComparator
 > StringComparatorsIgnoringNulls
 > ProximateGeoComparator
 > CrossMultiComparator
 > ExactOrNullCrossMultiComparator
 > <Custom Comparator>

Why Tokenization?
 > Tokenization is used to match candidates that will be presented to the match groups for actual comparison purposes
 > Tokenization avoids the need to compare every possible pair of records (out of millions of records) by identifying "match candidate pairs" in your tenant that are close enough
   that they should be formally evaluated by the match groups.
 > Match Token Class are designed to mimic the same strategies as Comparator Clases. So, for SoundexComparator we need SoundexTextMatchToken Class
 > Tokenizing an attribute can however be needs proper evaluation as some attributes may generate too many tokens due to threashold and degrade the performance
















































